## This chart relies on the common library chart from bjw-s
## You can find it at https://github.com/bjw-s/helm-charts/tree/main/charts/library/common
## Refer there for more detail about the supported values

# These entries are shared between all the Immich components

env:
  REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
  DB_HOSTNAME: "{{ .Release.Name }}-postgresql"
  DB_USERNAME: "{{ .Values.postgresql.global.postgresql.auth.username }}"
  DB_DATABASE_NAME: "{{ .Values.postgresql.global.postgresql.auth.database }}"
  # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
  DB_PASSWORD: "{{ .Values.postgresql.global.postgresql.auth.password }}"
  IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'

image:
  tag: v1.91.4

immich:
  persistence:
    # Main data store for all photos shared between different components.
    library:
      # Automatically creating the library volume is not supported by this chart
      # You have to specify an existing PVC to use
      existingClaim: library

# Dependencies

postgresql:
  enabled: true
  image:
    repository: tensorchord/pgvecto-rs
    tag: pg14-v0.1.11
  global:
    storageClass: openebs-jiva-csi-default
    postgresql:
      auth:
        existingSecret: postgres-secrets
  primary:
    initdb:
      scripts:
        create-extensions.sql: |
          CREATE EXTENSION cube;
          CREATE EXTENSION earthdistance;
          CREATE EXTENSION vectors;

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false

# Immich components

server:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-server
    pullPolicy: IfNotPresent
  env:
    - name: REDIS_HOSTNAME
      value: '{{ printf "%s-redis-master" .Release.Name }}'
    - name: DB_HOSTNAME
      value: "{{ .Release.Name }}-postgresql"
    - name: DB_USERNAME
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: DB_USERNAME
    - name: DB_DATABASE_NAME
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: DB_DATABASE_NAME
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: DB_PASSWORD
    - name: IMMICH_WEB_URL
      value: '{{ printf "http://%s-web:3000" .Release.Name }}'
    - name: IMMICH_SERVER_URL
      value: '{{ printf "http://%s-server:3001" .Release.Name }}'
    - name: IMMICH_MACHINE_LEARNING_URL
      value: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'
  
  ingress:
    main:
      enabled: true
      annotations:
        # proxy-body-size is set to 0 to remove the body limit on file uploads
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
      ingressClassName: nginx
      hosts:
        - host: immich.legion.lan
          paths:
            - path: "/"
      tls: []

microservices:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-server
    pullPolicy: IfNotPresent

machine-learning:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-machine-learning
    pullPolicy: IfNotPresent
  env:
    TRANSFORMERS_CACHE: /cache
  persistence:
    cache:
      enabled: true
      size: 10Gi
      # Optional: Set this to pvc to avoid downloading the ML models every start.
      type: pvc
      accessMode: ReadWriteOnce
      storageClass: nfs-client
