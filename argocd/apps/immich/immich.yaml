apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: immich-helm-chart
  namespace: argocd
spec:
  project: immich
  source:
    chart: immich
    repoURL: 'https://immich-app.github.io/immich-charts'
    targetRevision: 0.1.1
    helm:
      releaseName: immich
      values: |
        ## This chart relies on the common library chart from bjw-s
        ## You can find it at https://github.com/bjw-s/helm-charts/tree/main/charts/library/common
        ## Refer there for more detail about the supported values

        # These entries are shared between all the Immich components

        env:
          REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
          DB_HOSTNAME: "{{ .Release.Name }}-postgresql"
          DB_USERNAME: "{{ .Values.postgresql.global.postgresql.auth.username }}"
          DB_DATABASE_NAME: "{{ .Values.postgresql.global.postgresql.auth.database }}"
          # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
          DB_PASSWORD: "{{ .Values.postgresql.global.postgresql.auth.password }}"
          TYPESENSE_ENABLED: "{{ .Values.typesense.enabled }}"
          TYPESENSE_API_KEY: "{{ .Values.typesense.env.TYPESENSE_API_KEY }}"
          TYPESENSE_HOST: '{{ printf "%s-typesense" .Release.Name }}'
          IMMICH_WEB_URL: '{{ printf "http://%s-web:3000" .Release.Name }}'
          IMMICH_SERVER_URL: '{{ printf "http://%s-server:3001" .Release.Name }}'
          IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'

        image:
          tag: v1.82.1

        immich:
          persistence:
            # Main data store for all photos shared between different components.
            library:
              # Automatically creating the library volume is not supported by this chart
              # You have to specify an existing PVC to use
              existingClaim: library

        # Dependencies

        postgresql:
          enabled: true
          global:
            storageClass: openebs-jiva-csi-default
            postgresql:
              auth:
                existingSecret: postgres-secrets

        redis:
          enabled: false
          architecture: standalone
          auth:
            enabled: false

        typesense:
          enabled: false
          env:
            TYPESENSE_DATA_DIR: /tsdata
            TYPESENSE_API_KEY: typesense
          persistence:
            tsdata:
              # Enabling typesense persistence is recommended to avoid slow reindexing
              enabled: true
              accessMode: ReadWriteOnce
              size: 1Gi
              storageClass: openebs-jiva-csi-default
          image:
            repository: docker.io/typesense/typesense
            tag: 0.24.0
            pullPolicy: IfNotPresent

        # Immich components

        server:
          enabled: true
          env:
            - name: REDIS_HOSTNAME
              value: '{{ printf "%s-redis-master" .Release.Name }}'
            - name: DB_HOSTNAME
              value: "{{ .Release.Name }}-postgresql"
            - name: DB_USERNAME
              value: "{{ .Values.postgresql.global.postgresql.auth.username }}"
            - name: DB_DATABASE_NAME
              value: "{{ .Values.postgresql.global.postgresql.auth.database }}"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: password
            - name: TYPESENSE_ENABLED
              value: "{{ .Values.typesense.enabled }}"
            - name: TYPESENSE_API_KEY
              value: "{{ .Values.typesense.env.TYPESENSE_API_KEY }}"
            - name: TYPESENSE_HOST
              value: '{{ printf "%s-typesense" .Release.Name }}'
            - name: IMMICH_WEB_URL
              value: '{{ printf "http://%s-web:3000" .Release.Name }}'
            - name: IMMICH_SERVER_URL
              value: '{{ printf "http://%s-server:3001" .Release.Name }}'
            - name: IMMICH_MACHINE_LEARNING_URL
              value: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'
          image:
            repository: ghcr.io/immich-app/immich-server
            pullPolicy: IfNotPresent

        microservices:
          enabled: false
          env:
            - name: REVERSE_GEOCODING_DUMP_DIRECTORY
              value: /geodata-cache
            - name: REDIS_HOSTNAME
              value: '{{ printf "%s-redis-master" .Release.Name }}'
            - name: DB_HOSTNAME
              value: "{{ .Release.Name }}-postgresql"
            - name: DB_USERNAME
              value: "{{ .Values.postgresql.global.postgresql.auth.username }}"
            - name: DB_DATABASE_NAME
              value: "{{ .Values.postgresql.global.postgresql.auth.database }}"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: password
            - name: TYPESENSE_ENABLED
              value: "{{ .Values.typesense.enabled }}"
            - name: TYPESENSE_API_KEY
              value: "{{ .Values.typesense.env.TYPESENSE_API_KEY }}"
            - name: TYPESENSE_HOST
              value: '{{ printf "%s-typesense" .Release.Name }}'
            - name: IMMICH_WEB_URL
              value: '{{ printf "http://%s-web:3000" .Release.Name }}'
            - name: IMMICH_SERVER_URL
              value: '{{ printf "http://%s-server:3001" .Release.Name }}'
            - name: IMMICH_MACHINE_LEARNING_URL
              value: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'
          persistence:
            geodata-cache:
              enabled: true
              size: 1Gi
              # Optional: Set this to pvc to avoid downloading the geodata every start.
              type: pvc
              accessMode: ReadWriteOnce
              storageClass: openebs-jiva-csi-default
          image:
            repository: ghcr.io/immich-app/immich-server
            pullPolicy: IfNotPresent

        machine-learning:
          enabled: false
          image:
            repository: ghcr.io/immich-app/immich-machine-learning
            pullPolicy: IfNotPresent
          env:
            TRANSFORMERS_CACHE: /cache
          persistence:
            cache:
              enabled: true
              size: 10Gi
              # Optional: Set this to pvc to avoid downloading the ML models every start.
              type: pvc
              accessMode: ReadWriteOnce
              storageClass: openebs-jiva-csi-default

        web:
          enabled: true
          image:
            repository: ghcr.io/immich-app/immich-web
            pullPolicy: IfNotPresent
          persistence:
            library:
              enabled: false

        proxy:
          enabled: true
          image:
            repository: ghcr.io/immich-app/immich-proxy
            pullPolicy: IfNotPresent
          persistence:
            library:
              enabled: false

          ingress:
            main:
              enabled: false
              annotations:
                # proxy-body-size is set to 0 to remove the body limit on file uploads
                nginx.ingress.kubernetes.io/proxy-body-size: "0"
              hosts:
                - host: immich.legion.lan
                  paths:
                    - path: "/"
              tls: []

  destination:
    namespace: immich
    server: 'https://kubernetes.default.svc'
  syncPolicy: {}
    # automated: {}
    # syncOptions: []
  
